  Author: Matthew Thomas
    Date: 3/16/2019
Contains: Design details for CSCI E-215 homework 3
==================================================
Project: sttyl

Purpose: Set a limited number of options for a terminal device interface.

Outline:
	sttyl with no arguments will print the current values for options
	it knows about. Special characters you can change are erase and
	kill. Other attributes can be set (turned on) using the name, or
	unset (turned off) by adding a '-' before the attribute. See usage
	below for examples.

Arguments:
	sttyl accepts arguments for the following flags:

			icrnl, hupcl, echo, echoe, opost, icanon, and isig
	
	Flag arguments with a leading dash, '-', will turn that flag OFF for the
	tty. Flag arguments without a leading dash, will turn that flag ON. The
	following command line, for example, will turn "echo" and "icanon" ON,
	and turn "hupcl" OFF.
	
			./sttyl echo icanon -hupcl
	
	sttyl also accepts arguments for the following control chars:

			erase and kill
			
	These arguments take a proceeding value of a single char that is used to
	replace the control char. The following command line, for example, will
	set "erase" to 'm' and "kill" to '^X'
	
			./sttyl erase m kill ^X
	
	The real stty accepts two-char values in the form of caret-letter, such as
	"^X". In the command line above, '^X' was obtained by pressing Control-X
	on the keyboard, as opposed to the '^' caret char AND the 'X' char. As
	mentioned in bullet #2 of the assignment, this implementation is not
	required to handle this case, and it does not.
	
	sttyl accepts multiple arguments on a single command line (as in the
	examples above). sttyl also accepts no arguments, and will print info
	about the tty in this case. See the "Output" section below for what
	info it outputs.

Output:
	When setting values for control characters or flags, sttyl has no output.
	If there is an invalid or missing argument, a message will be output to
	stderr.
	
	When sttyl is called with no arguments, sttyl will output basic info
	about the tty. The info it prints includes the speed, size of the tty,
	control chars, and state of all flags. The output is modeled after the
	implementation of `stty` on macOS, which includes the flag-type as a
	header -- e.g. "local-flags: ..." -- in the output. On the nice servers,
	stty does not output those "headers", but the flags are still sorted
	by type.

Data Structures:
	

Algorithms:


Program Flow:
     1 - Process user options and store arguments in three variables: path,
         name, and type. A path argument cannot being with a '-' as that
         symbolizes an option. Accepted options are "-name" and "-type".
         If a "-type" is specified, the helper function get_type() returns
         the corresponding bitmask specified in <sys/stat.h>.
     2 - Call on searchdir() with the user options. A path must be specified
         otherwise it is a syntax error. Name and type need not be specified,
         and default to NULL and 0 respectively.
     3 - Treat the path, "dirname", specified on the command line as a
         directory and try to open with a call to opendir().
    3a - If opendir() fails, call on process_file() to treat the starting
         path as a file. Call lstat() to retrieve file info and check if
         the file type *was* a directory. If so, there was an error with
         opendir() and we should print an error message and return. Else,
         compare the file name and info with the criteria specified by the
         user. If it matches, output the name of the file.
    3b - If opendir() succeeds, call on process_dir() to iterate through
         all entries in the directory. For each entry read in by readdir(),
         call lstat() to retrieve file info and compare the name/info with
         the criteria specified by the user. If it matches, output the name
         of the file.
    3c - Next, check to see if the current entry is a directory, and if so,
         recursively call searchdir() with the current path as "dirname".
     4 - If starting path was a file, searchdir() will return -- no directory
         to close. If starting path was a directory, once each level of
         recursion is complete, the malloc()ed path name will be freed and
         directory closed.

Error Handling:
    There are three helper functions to assist with reporting errors. "find"
    has a few differently formatted errors that appear for different reasons,
    and the three helper functions -- syntax_error(), file_error(), and
    type_error() -- simplify outputting the correct message.
    
    syntax_error() takes no arguments and simply outputs an error about
    correct usage, copied from the homework assignment. It exits 1 after
    printing the message to stderr.
    
    type_error() is used when processing the user's command-line arguments.
    It takes the "-option" entered and the value proceeding it. It exits 1
    after printing the message to stderr.
    
    get_type() is another helper function used when processing the "-type"
    flag. pfind only accepts b, c, d, f, l, p, or s as values for "-type".
    If a letter besides one of those mentioned is entered, it is an
    "Unkown argument" error, and the program will exit 1.
    
    file_error() takes a path as an argument and is called to output the
    errno related to an lstat() or opendir() call. 
