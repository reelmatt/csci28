  Author: Matthew Thomas
    Date: 4/6/2019
Contains: Design details for CSCI E-215 homework 4
==================================================
Project: pong

Purpose: Play a one-player game of pong; last as long as you can with
		 three balls.

Outline:
	The player moves a paddle up and down using the 'k' and 'm' keys
	respectively. The goal is to bounce the ball off the paddle and keep
	the ball in play for as long as possible. You get three balls (lives)
	and a "TOTAL TIME" clock keeps track of how long you have lasted. Once
	you miss three balls, the game ends and displays a message containing
	your score (time). To quit before playing through all three lives, type
	'Q' to exit.

Data Structures:
	pong is written in a pseudo object-oriented way. The game has a few key
	components, each with separate .c and .h files to provide interfaces to
	the objects they represent. In this case, the main game logic resides in
	pong.c, and the object code resides in ball.c, clock.c, court.c, and
	paddle.c. The game also makes use of alarmlib.c which provides "timer
	functions for [a] higher resolution clock".
	
	Each file/object has a mix of internal functions to get, set, and modify
	variables of the structs they create, as well as external interfaces to
	control the movement and display. A list of these functions can be found
	at the top of each respective file. For more info on the purpose of each
	object, and how they relate to the big picture, see the sections below.

pong.c
	This file 

ball.c

clock.c

court.c

paddle.c

	

Program Flow:
	1 - Start by initializing curses, signal handlers, and objects for each
		of the main components of the game -- ball, paddle, clock, and court.
	2 - Once the set up is complete, start a timer that sends out SIGALRMs at
		regular intervals and serve the first ball.
	3 - The program blocks on player keyboard input to move the paddle up and
		down. Meanwhile, the ball continues to animate due to a steady stream
		of SIGALRMs.
	4 - For each ball or paddle movement, the program calls a function
		bounce_or_lose() which responds with NO_CONTACT, BOUNCE, or LOSE.
			When NO_CONTACT, nothing special happens.
			When BOUNCE, the ball has contacted one of the three court walls.
				Change the ball's direction and keep it moving.
			When LOSE, the ball has hit the right-edge of the screen WITHOUT
				coming in contact with the paddle. Stop the ball from moving
				and pause the game for one second to signal the end of a
				round.
	5 - If a ball is lost, and there are more balls left to play, decrement
		count by one and serve the ball again.
	6 - When there are no more balls left to play, display a bolded message
		in the center of the screen with the user's final time (score) and
		then return the user to the terminal.

Error Handling:
	There are only a handful of error conditions in the pong game. An error
	can occur when trying to malloc() space for ball or paddle objects. In
	these cases, the constructor will close curses, display an error message,
	and exit out of the game.
	
	The other error condition is the terminal window being too small to draw
	the game. Minimum dimensions are set in pong.c -- MIN_COLS is 40 and
	MIN_LINES is 11. The MIN_COLS dimension ensures that the two game
	counters -- balls left and total time -- can be displayed without overlap.
	The MIN_LINES dimension ensures that, when taking the border into account,
	the playable court is at least three lines tall (which would create a
	paddle of size one). If these minimum dimensions are not met, pong will
	close curses so it can output a message to stderr, and exit.
	
Race condition:
	