  Author: Matthew Thomas
    Date: 3/2/2019
Contains: Design details for CSCI E-215 homework 2
==================================================
//@@TO-DO:
	--not calling free() for all full_path strings that are malloc()ed.
	--investigate increasing path buffer size if path is longer than PATHLEN
	--clean up/refactor code


Project: pfind

Purpose: Search directories and subdirectories for files matching criteria.

Outline:
	pfind recursively searches, depth-first, through directories and any
	subdirectories it encounters, starting with a provided path. If no options
	are specified by the user, pfind prints all files it encounters. Users are
	allowed to specified either a search query -- i.e. "*.c" or "Makefile".
	Users can also specify a file type. If one, or both, options are specified
	pfind will filter the results.

Arguments:
	Proper usage for the pfind program is as follows:
		./pfind starting_path [-name file-or-pattern] [-type {b|c|d|f|l|p|s}]
	
	The starting path must be specified, and be the first argument. The -name
	and -type arguments are optional, can appear in any order, but must not
	appear more than once. See the Input section below for more details
	about the options for -name and -type.
		
Input:
	pfind is controlled via the command line. It requires a starting path and
	optionally allows for a filename/pattern to be specified and/or a file
	type.
	
	starting_path: a simple get_path() function prints an error message if
			 the argument provided begins with a '-', which indicates an
			 option. Otherwise, whatever the string entered by the user is
			 stored. If it was an invalid path, an error message will be
			 called later in the program.
	
	[-name]: 
	
	[-type]: Compared with the st_mode value of a given file after lstat() is
			 called. The following are the types specified in <sys/stat.h>
			 with the corresponding letters being those used in the system find
			 command.
					b: block special
					c: character special
					d: directory
					f: regular file
					l: symbolic link
					p: FIFO
					s: socket

Output:
	The output is a list of paths-to-filenames, sorted according to the order
	of directory entries returned by readdir(). pfind performs a recursive,
	depth-first search, so the contents of a subdirectory, if any, will precede
	the remaining entries in the current/parent directory.
	
	pfind uses a helper function, construct_path(), to build the path to the
	current file being examined. If no user-options are specified, or it
	matches the options specified, printf() outputs it to the screen.
	
	There are two exceptions that relate to directories, the "." and ".."
	entries. ".." entries will be skipped, both in the output and in the
	recursive search (see Program Flow for why). "." entries will also be
	skipped, because they are equivalent to previous output. For example,
	if you start a pfind search in /usr, "bin" is one of the entries; a
	directory. pfind will open "bin" and start recursively searching. "."
	is skipped because that is equivalent to "/usr/bin", which has already
	been output.

Data Structures:
	The main logic exists in pfind.c. Error-handling functions are located in
	pfind-errors.c and other helper functions are located in pfind-helpers.c.

	The helper functions deal with allocating memory and work as follows:
		construct_path: calls malloc() to create a string to store
	
	The functions work as follows:
		ll_open: Opens the file and returns the file descriptor for the lastlog
				 file that is used.
		ll_seek: If the requested record is already in the buffer, update
				 cur_rec to that position for the next call of ll_read. If not
				 in the buffer, call on lseek() to move the pointer in the file
				 descriptor in advance of retrieving a new buffer. Reload the
				 buffer with NRECS starting at the nearest multiple of the
				 buffer size.
		ll_read: If the buffer is empty when called, it loads NRECS into the
				 buffer. If the cur_rec is at the end of the buffer, it attempts
				 to load a new set of records into the buffer. If successful,
				 ll_read() will return a pointer to the lastlog struct for the
				 cur_rec.
	  ll_reload: Uses the system call read() to load NRECS into the buffer from
	  			 wherever ll_seek moved the pointer to (via the offset
	  			 in lseek).
	   ll_close: Closes the open file.
	
	When a record is requested outside of the current buffer, ll_seek() will
	adjust the file pointer so that ll_reload() will pull in NRECS starting at
	the nearest multiple of the buffer size. For example, if UID 600 is 
	requested with NRECS set to 512, lseek() will point to offset 512 in the
	lastlog file and read records 512-1023.

Program Flow:
	1 - Process user options and store any arguments in three
		variables: user, days, and file to be used later on (if specified).
		For the -u and -t, check immediately whether the user/time are valid,
		and exit, with message to stderr, if not.
	2 - Call on get_log() with the user options. File is set to LLOG_FILE
		by default, user is set to NULL or the requested passwd entry, and days
		is set to -1 or the number of days entered with -t.
	3 - Open the lastlog file.
	4 - If a "user" was not specified, call getpwent() to begin iterating
		through the all passwd database entries. Otherwise, set the entry to the
		user pulled in from the -u option.
	5 - For all (1+) passwd entries, call ll_seek() to move a pointer to the
		correct place to read. If nothing has been read yet, or the requested
		passwd entry is outside the current buffer, the program uses the system
		call lseek() to manipulate the pointer to the file descriptor. If the
		request is for an entry currently in the buffer, it adjusts the cur_rec
		variable accordingly.
	6 - If there was an error (e.g. requested a range outside the lastlog file)
		then the lastlog pointer, ll, is set to NULL. Otherwise, ll_read() is
		called, and it returns a pointer to the requested struct lastlog entry.
	7 - The lastlog information is then displayed, with a filter applied based
		on the user's optional -t argument. If no users are displayed, headers
		are also not displayed.
	8 - When all 1+ entries are processed, call endpwent() if no user was
		specified, and in all cases close the lastlog file.

Files:
	pfind uses opendir, readdir, and closedir to process directory entries,
	which are the files on disk. pfind uses readdir() to get the name of a
	file and lstat() to get information about the file, like the type. See
	Output, Data Structures, and Program Flow for more information about
	pfind reads and processes these directory entries.
